package routines;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class TalendHTMLUtils {

    /**
     * prsingHTMLFile: return Map collection of values.
     * 
     * 
     * {talendTypes} Map<K,V>
     * 
     * {Category} HTML Utils
     * 
     * {param} string("<html><head><title>First parse</title></head><body><TABLE BORDER="1"><TR><TD>Date de l'opération</TD></TR><TR><TD>="29/09/2023"</TD></TR></TABLE></body></html>") input: The string need to be parsed.
     * 
     * {example} prsingHTMLFile("<html><head><title>First parse</title></head><body><TABLE BORDER="1"><TR><TD>Date de l'opération</TD></TR><TR><TD>="29/09/2023"</TD></TR></TABLE></body></html>") # {"Date de l'opération","29/09/2023"}.
     */
    public static List<String> prsingHTMLFile(String html) {
        //init variable
    	List<String> result = new ArrayList<>();
    	// traitement spécifique html input
    	Document doc = Jsoup.parse(html);
    	Elements elements = doc.getElementsByTag("TABLE");
    	Element element = elements.get(2);
    	Elements elementsRows = element.getElementsByTag("TR");
    	elementsRows.forEach(e->{
    		String rows = e.toString().replace("<tr> \n <td>","").replace("</td> \n</tr>","").replace("</td>\n <td>", ";");
    		result.add(rows);
    	});
    	return result;
    }
    
    public static List<String> HTMLExtractlink(String html) {
        //init variable
    	List<String> result = new ArrayList<>();
    	// traitement spécifique html input
    	Document doc = Jsoup.parse(html);
    	 // Extraire les liens des balises img
    	result.addAll(extractFileLinks(doc, "img", "src"));

        // Extraire les liens des balises a (liens)
    	result.addAll(extractFileLinks(doc, "a", "href"));
        // Ajoutez d'autres balises selon vos besoins
    	return result;
    }
    
    
    private static List<String> extractFileLinks(Document document, String tagName, String attributeName) {
        // Sélectionnez toutes les balises img (ou autre balise spécifiée) avec l'attribut spécifié
        Elements elements = document.select(tagName + "[" + attributeName + "]");
        List<String> result = new ArrayList<>();
        for (Element element : elements) {
            // Obtenez la valeur de l'attribut spécifié (src ou href)
            String fileUrl = element.attr(attributeName);

            // Utilisez la classe URI pour extraire le chemin
            try {
                URI uri = new URI(fileUrl);
                String path = uri.getPath();
                if(path!=null) {
	                // Obtenez le dernier segment du chemin, c'est-à-dire le nom du fichier
	                String[] segments = path.split("/");
	                if(segments.length>0) {
	                	String fileName = segments[segments.length - 1];
	                	result.add(fileName);
	            	}
                }
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        }
        return result;
    }
}
